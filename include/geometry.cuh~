// geometry.cuh

#pragma once
#include "geometry.hpp"  // For Mesh and Geometry structs

#pragma once

struct Vec3 {
  double x, y, z;

  __host__ __device__ Vec3() : x(0.0), y(0.0), z(0.0) {}
  __host__ __device__ Vec3(double x_, double y_, double z_) : x(x_), y(y_), z(z_) {}

  __host__ __device__ Vec3 operator+(const Vec3& b) const { return Vec3(x + b.x, y + b.y, z + b.z); }
  __host__ __device__ Vec3 operator-(const Vec3& b) const { return Vec3(x - b.x, y - b.y, z - b.z); }
  __host__ __device__ Vec3 operator*(double a) const { return Vec3(x * a, y * a, z * a); }
  __host__ __device__ Vec3& operator+=(const Vec3& b) { x += b.x; y += b.y; z += b.z; return *this; }

  __host__ __device__ double dot(const Vec3& b) const { return x * b.x + y * b.y + z * b.z; }
  __host__ __device__ double norm() const { return sqrt(x * x + y * y + z * z); }

  __host__ __device__ Vec3 cross(const Vec3& b) const {
    return Vec3(
      y * b.z - z * b.y,
      z * b.x - x * b.z,
      x * b.y - y * b.x
    );
  }

  __host__ __device__ void normalize() {
    double n = norm();
    if (n > 1e-10) {
      x /= n; y /= n; z /= n;
    }
  }
};


void compute_geometry_gpu(const Mesh& mesh, Geometry& geom, int Nq);
