// quadpoints.cpp

#include "quadrature.hpp"
#include <vector>
#include <array>
#include <unordered_map>
#include <stdexcept>
#include <iostream>

QuadratureData gauss_legendre(int Nleg) {
  QuadratureData qd;
  qd.zq.resize(Nleg);
  qd.wq.resize(Nleg);

  if (Nleg == 1) {
    qd.zq[0] = 0.0;
    qd.wq[0] = 2.0;
  } else if (Nleg == 2) {
    qd.zq[0] = -0.5773502691896257;
    qd.zq[1] =  0.5773502691896257;
    qd.wq[0] = 1.0;
    qd.wq[1] = 1.0;
  } else if (Nleg == 3) {
    qd.zq[0] = -0.7745966692414834;
    qd.zq[1] =  0.0;
    qd.zq[2] =  0.7745966692414834;
    qd.wq[0] = 0.5555555555555556;
    qd.wq[1] = 0.8888888888888888;
    qd.wq[2] = 0.5555555555555556;
  } else if (Nleg == 4) {
    qd.zq = {-0.8611363115940526, -0.3399810435848563,
      0.3399810435848563,  0.8611363115940526};
    qd.wq = {0.3478548451374538, 0.6521451548625461,
      0.6521451548625461, 0.3478548451374538};
  } else if (Nleg == 5) {
    qd.zq = {-0.9061798459386640, -0.5384693101056831, 0.0,
      0.5384693101056831,  0.9061798459386640};
    qd.wq = {0.2369268850561891, 0.4786286704993665, 0.5688888888888889,
      0.4786286704993665, 0.2369268850561891};
  } else if (Nleg == 6) {
    qd.zq = {-0.932469514203152, -0.661209386466265, -0.238619186083197,
      0.238619186083197,  0.661209386466265,  0.932469514203152};
    qd.wq = {0.171324492379170, 0.360761573048139, 0.467913934572691,
      0.467913934572691, 0.360761573048139, 0.171324492379170};
  } else if (Nleg == 8) {
    qd.zq = {-0.9602898564975363, -0.7966664774136267, -0.5255324099163290, -0.1834346424956498,
      0.1834346424956498,  0.5255324099163290,  0.7966664774136267,  0.9602898564975363};
    qd.wq = {0.1012285362903763, 0.2223810344533745, 0.3137066458778873, 0.3626837833783619,
      0.3626837833783619, 0.3137066458778873, 0.2223810344533745, 0.1012285362903763};
  } else if (Nleg == 12) {
    qd.zq = {-0.981560634246719, -0.904117256370475, -0.769902674194305, -0.587317954286617,
      -0.367831498998180, -0.125233408511469,
      0.125233408511469,  0.367831498998180,  0.587317954286617,  0.769902674194305,
      0.904117256370475,  0.981560634246719};
    qd.wq = {0.047175336386512, 0.106939325995318, 0.160078328543346, 0.203167426723066,
      0.233492536538355, 0.249147045813403,
      0.249147045813403, 0.233492536538355, 0.203167426723066, 0.160078328543346,
      0.106939325995318, 0.047175336386512};
  } else if (Nleg == 20) {
    qd.zq = {-0.9931285991850949, -0.9639719272779138, -0.9122344282513259, -0.8391169718222188,
      -0.7463319064601508, -0.6360536807265150, -0.5108670019508271, -0.3737060887154196,
      -0.2277858511416451, -0.0765265211334973,
      0.0765265211334973,  0.2277858511416451,  0.3737060887154196,  0.5108670019508271,
      0.6360536807265150,  0.7463319064601508,  0.8391169718222188,  0.9122344282513259,
      0.9639719272779138,  0.9931285991850949};
    qd.wq = {0.0176140071391521, 0.0406014298003869, 0.0626720483341091, 0.0832767415767047,
      0.1019301198172404, 0.1181945319615184, 0.1316886384491766, 0.1420961093183820,
      0.1491729864726037, 0.1527533871307259,
      0.1527533871307259, 0.1491729864726037, 0.1420961093183820, 0.1316886384491766,
      0.1181945319615184, 0.1019301198172404, 0.0832767415767047, 0.0626720483341091,
      0.0406014298003869, 0.0176140071391521};
  } else {
    throw std::invalid_argument("Unsupported Gauss-Legendre order");
  }

  return qd;
}

QuadratureData gauss_triangle(int Ntrg) {
  QuadratureData qd;
  if (Ntrg == 1) {
    qd.xiq = {1.0/3.0};
    qd.etq = {1.0/3.0};
    qd.wwq = {1.0};
  } else if (Ntrg == 3) {
    qd.xiq = {1.0/6.0, 2.0/3.0, 1.0/6.0};
    qd.etq = {1.0/6.0, 1.0/6.0, 2.0/3.0};
    qd.wwq = {1.0/3.0, 1.0/3.0, 1.0/3.0};
  } else if (Ntrg == 4) {
    qd.xiq = {1.0/3.0, 1.0/5.0, 3.0/5.0, 1.0/5.0};
    qd.etq = {1.0/3.0, 1.0/5.0, 1.0/5.0, 3.0/5.0};
    qd.wwq = {-27.0/48.0, 25.0/48.0, 25.0/48.0, 25.0/48.0};
  } else if (Ntrg == 6) {
    double al = 0.816847572980459;
    double be = 0.445948490915965;
    double ga = 0.108103018168070;
    double de = 0.091576213509771;
    double o1 = 0.109951743655322;
    double o2 = 0.223381589678011;
    qd.xiq = {de, al, de, be, ga, be};
    qd.etq = {de, de, al, be, be, ga};
    qd.wwq = {o1, o1, o1, o2, o2, o2};
  } else if (Ntrg == 7) {
    double al = 0.797426958353087;
    double be = 0.470142064105115;
    double ga = 0.059715871789770;
    double de = 0.101286507323456;
    double o1 = 0.125939180544827;
    double o2 = 0.132394152788506;
    qd.xiq = {de, al, de, be, ga, be, 1.0/3.0};
    qd.etq = {de, de, al, be, be, ga, 1.0/3.0};
    qd.wwq = {o1, o1, o1, o2, o2, o2, 0.225};
  } else if (Ntrg == 9) {
    double al = 0.124949503233232;
    double qa = 0.165409927389841;
    double rh = 0.797112651860071;
    double de = 0.437525248383384;
    double ru = 0.037477420750088;
    double o1 = 0.205950504760887;
    double o2 = 0.063691414286223;
    qd.xiq = {de, al, de, qa, ru, rh, qa, ru, rh};
    qd.etq = {de, de, al, ru, qa, qa, rh, rh, ru};
    qd.wwq = {o1, o1, o1, o2, o2, o2, o2, o2, o2};
  } else if (Ntrg == 12) {
    double al = 0.873821971016996;
    double be = 0.249286745170910;
    double ga = 0.501426509658179;
    double de = 0.063089014491502;
    double rh = 0.636502499121399;
    double qa = 0.310352451033785;
    double ru = 0.053145049844816;
    double o1 = 0.050844906370207;
    double o2 = 0.116786275726379;
    double o3 = 0.082851075618374;
    qd.xiq = {de, al, de, be, ga, be, qa, ru, rh, qa, ru, rh};
    qd.etq = {de, de, al, be, be, ga, ru, qa, qa, rh, rh, ru};
    qd.wwq = {o1, o1, o1, o2, o2, o2, o3, o3, o3, o3, o3, o3};
  } else if (Ntrg == 13) {
    double al = 0.479308067841923;
    double be = 0.065130102902216;
    double ga = 0.869739794195568;
    double de = 0.260345966079038;
    double rh = 0.638444188569809;
    double qa = 0.312865496004875;
    double ru = 0.048690315425316;
    double o1 = 0.175615257433204;
    double o2 = 0.053347235608839;
    double o3 = 0.077113760890257;
    double o4 = -0.149570044467670;
    qd.xiq = {de, al, de, be, ga, be, qa, ru, rh, qa, ru, rh, 1.0/3.0};
    qd.etq = {de, de, al, be, be, ga, ru, qa, qa, rh, rh, ru, 1.0/3.0};
    qd.wwq = {o1, o1, o1, o2, o2, o2, o3, o3, o3, o3, o3, o3, o4};
  } else {
    throw std::invalid_argument("Unsupported triangle quadrature order");
  }
  return qd;
}
