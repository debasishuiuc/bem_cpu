// write_txt.cpp

#include "write_txt.hpp"
#include <fstream>
#include <filesystem>
#include <iostream>
#include <iomanip>

void write_txt(const Mesh& mesh, const GeometryAnalyzer& analyzer, const std::string& outdir) {
  std::ofstream pfile(outdir + "p.txt");
  std::ofstream nfile(outdir + "n.txt");
  std::ofstream nefile(outdir + "ne.txt");
  std::ofstream nbefile(outdir + "nbe.txt");
  std::ofstream vncfile(outdir + "vnc.txt");
  std::ofstream crvfile(outdir + "curvature.txt");
  std::ofstream vnafile(outdir + "vna.txt");
  std::ofstream nodecurvfile(outdir + "node_curvature.txt");

  if (!pfile || !nfile || !nefile || !nbefile || !vncfile || !crvfile || !vnafile) {
    std::cerr << "Error opening one or more output .txt files in " << outdir << "\n";
    return;
  }

  // Node coordinates
  for (const auto& pt : mesh.p)
    pfile << pt[0] << " " << pt[1] << " " << pt[2] << "\n";

  // 6-node triangle connectivity
  for (const auto& tri : mesh.n)
    nfile << tri[0] << " " << tri[1] << " " << tri[2] << " "
          << tri[3] << " " << tri[4] << " " << tri[5] << "\n";

  // Connectivity: ne (ne_flat with offsets)
  for (int i = 0; i < mesh.Npts; ++i) {
    int start = mesh.ne_offsets[i];
    int end = mesh.ne_offsets[i + 1];
    for (int j = start; j < end; ++j)
      nefile << mesh.ne_flat[j] << " ";
    nefile << "\n";
  }

  // Connectivity: nbe
  for (const auto& nbs : mesh.nbe)
    nbefile << nbs[0] << " " << nbs[1] << " " << nbs[2] << "\n";

  // Element normals (vnc)
  for (const auto& n : analyzer.elementNormals)
    vncfile << n[0] << " " << n[1] << " " << n[2] << "\n";

  // Element curvature (crvmel)
  for (double c : analyzer.elementCurvature)
    crvfile << std::fixed << std::setprecision(12) << c << "\n";

  // Node normals (vna)
  for (const auto& n : analyzer.nodeNormals)
    vnafile << n[0] << " " << n[1] << " " << n[2] << "\n";

  
  if (!nodecurvfile) {
    std::cerr << "Error opening node_curvature.txt in " << outdir << "\n";
    return;
  }

  // Write node curvature values (one per line)
  for (double val : analyzer.nodeCurvature) {
    nodecurvfile << std::fixed << std::setprecision(12) << val << "\n";
  }

  nodecurvfile.close();


  std::cout << "TXT files written to: " << outdir << "\n";
}
